;; Copyright (c) 2021 Thomas J. Otterson
;; 
;; This software is released under the MIT License.
;; https://opensource.org/licenses/MIT

;; Solves Project Euler problem 2:
;;
;; Each new term in the Fibonacci sequence is generated by adding the previous
;; two terms. By starting with 1 and 2, the first 10 terms will be:
;;
;;                1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
;;
;; By considering the terms in the Fibonacci sequence whose values do not exceed
;; four million, find the sum of the even-valued terms.

;; This is a brute-force solution, which is fine because the Fibonacci sequence
;; grows so rapidly that the largest long `n` would yield about 81 terms. It
;; operates using the fact that, if EFn is the nth even Fibonacci number, then
;; EFn = 4EF(n-1) + EF(n-2). A running sum is kept until the calculated
;; Fibonacci number is larger than the requested limit, and then the sum is
;; printed.
;;
;; This solution can be run using `clojure -X:p2`. It will default to the 4e6
;; input described in the problem. To run with another input, use `clojure -X:p2
;; :input 4e16` or similar.


(ns barandis.euler.p2)

(defn- even-fib-sum
  "Calculates the sum of all of the even Fibonacci numbers that are <= `n` using
   the formula EFn = 4 * EF(n-1) + EF(n-2), starting with EF1 = 2 and EF2 = 8."
  [n]
  (loop [fibn-1 8 fibn-2 2 sum 10]
    (let [fibn (+ fibn-2 (* 4 fibn-1))]
      (if (> fibn n)
        sum
        (recur fibn fibn-1 (+ sum fibn))))))

(defn solve
  "Prints out the sum of all even Fibonacci numbers that are less than or equal
   to (:input data). This number defaults to 4000000, which makes the return
   value the solution to Project Euler problem 2."
  ([] (solve {}))
  ([data] (-> (get data :input 4e6) long even-fib-sum println time)))
