;; Copyright (c) 2021 Thomas J. Otterson
;; 
;; This software is released under the MIT License.
;; https://opensource.org/licenses/MIT

;; Solves Project Euler problem 12:
;;
;; The sequence of triangle numbers is generated by adding the natural numbers.
;; So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
;; ten terms would be:
;;
;;                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;;
;; Let us list the factors of the first seven triangle numbers:
;;
;;     1: 1
;;     3: 1,3
;;     6: 1,2,3,6
;;    10: 1,2,5,10 
;;    15: 1,3,5,15
;;    21: 1,3,7,21
;;    28: 1,2,4,7,14,28
;;
;; We can see that 28 is the first triangle number to have over five divisors.
;;
;; What is the value of the first triangle number to have over five hundred
;; divisors?

;; The solution is straightforward. I am not one to miss an opportunity to
;; create an infinite sequence, so an infinite sequence of triangle numbers is
;; created. These are each factorized until the first one is found whose number
;; of factors exceeds the target.
;;
;; This solution can be run using `clojure -X:p12`. It will default to the 500
;; target described in the problem. To run with another target, use `clojure
;; -X:p12 :factors 5` or similar.

(ns barandis.euler.p12)

(def ^:private triangles
  "Infinite, lazy sequence of triangle numbers."
  (map #(/ (* % (inc %)) 2) (iterate inc 1)))

(defn- factorize
  "Returns a sorted set of all of the numbers that divide evenly into `n`."
  [n]
  (into (sorted-set)
        (->> (range 1 (inc (Math/sqrt n)))
             (filter #(zero? (rem n %)))
             (mapcat #(vector % (/ n %))))))

(defn- first-triangle
  "Calculates the first triangle number that has at least `n` factors."
  [n]
  (first (filter #(<= n (count (factorize %))) triangles)))

(defn solve
  "Displays the first triangle number that has at least (:factors data)
   factors. This number defaults to 500, which makes the displayed value the
   solution to Project Euler problem 12."
  ([] (solve {}))
  ([data] (-> (get data :factors 500) first-triangle println time)))
